"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A datetime and timezone string in ISO 8601 format `Y-m-dTH:i:sO`, e.g. `2020-04-20T13:53:12+02:00`."
scalar DateTimeTz @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTimeTz")


type User {
    id: ID!
    name: String!
    email: String!
    password: String!,
    username: String!,
    role: String!,
    created_at: DateTime!
    updated_at: DateTime!
}

type Customer {
    id: ID!
    name: String!
    phone_number: String!
    registration_date: Date
    address: String
    score: Int
    purchases: [Purchase!]! @hasMany
    created_at: DateTime!
    updated_at: DateTime!
}

type Purchase {
    id: ID!
    customer: Customer! @belongsTo
    amount: Float!
    created_at: DateTime!
    updated_at: DateTime!
}

type totalDashboar {
  totalPuchase: Int
  totalCustomer: Int
  totalUser: Int
}

type AccessToken {
  token: String!,
  expires_at: String,
  user: User
}

input LoginInput {
  email: String! @rules(apply: ["email"])
  password: String!
}

input CustomerSearchInput {
  name: String
}

type Query {
    users: [User!]! @all
    user(id: ID @eq): User @find
    userSearch(username: String @like): User @find
    me: User @auth

    totalDashboar: totalDashboar @field(resolver: "App\\GraphQL\\Queries\\Dashboard@totalAll")

    customers: [Customer!]! @field(resolver: "App\\GraphQL\\Mutations\\Customer@customers")
    customer(search: CustomerSearchInput): [Customer] @field(resolver: "App\\GraphQL\\Mutations\\Customer@customer")
   
    purchaseAll: [Purchase!] @field(resolver: "App\\GraphQL\\Mutations\\PurchaseMatation@allPurchase")
    purchases(customerId: ID!): [Purchase!]!  @field(resolver: "App\\GraphQL\\Mutations\\PurchaseMatation@purchases")
}


type Mutation {
    createUser(name: String!, email: String!, username: String!,  password: String!, role: String!): User! @create(resolver: "App\\GraphQL\\Mutations\\User@create")
    deleteUser(id: ID!): Boolean! @field(resolver: "App\\GraphQL\\Mutations\\User@delete")

    login(input: LoginInput @spread): AccessToken! @field(resolver: "App\\GraphQL\\Mutations\\Login@login")
    logout: Boolean! @field(resolver: "App\\GraphQL\\Mutations\\Login@logout")
    createCustomer(name: String!, phone_number: String!, address: String, registration_date: Date, score: Int): Customer! @field(resolver: "App\\GraphQL\\Mutations\\Customer@createCustomer")
    updateCustomer(id: ID!, name: String, phone_number: String, address: String,  registration_date: Date, score: Int): Customer! @field(resolver: "App\\GraphQL\\Mutations\\Customer@updateCustomer")
    deleteCustomer(id: ID!): Boolean! @field(resolver: "App\\GraphQL\\Mutations\\Customer@deleteCustomer")

    createPurchase(customerId: ID!, amount: Float!): Purchase! @field(resolver: "App\\GraphQL\\Mutations\\PurchaseMatation@createPurchase")
}
